generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id           String   @id @default(cuid())
  businessName String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  agents          Agent[]
  widgets         Widget[]
  messages        Message[]
  onlineAgents    OnlineAgent[]
  offlineMessages OfflineMessage[]
  conversations   Conversation[]
}

model Agent {
  id           String   @id @default(cuid())
  username     String
  passwordHash String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  tenantId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Widget {
  id          String   @id @default(cuid())
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  tenantId    String
  color       String
  widgetTitle String
  welcomeText String
  logoUrl     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model OnlineAgent {
  id            String   @id @default(cuid())
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  tenantId      String
  agentUsername String
  createdAt     DateTime @default(now())
}

model OfflineMessage {
  id        String   @id @default(cuid())
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  tenantId  String
  content   String
  createdAt DateTime @default(now())
}

model Conversation {
  id                    String    @id @default(cuid())
  tenant                Tenant    @relation(fields: [tenantId], references: [id])
  tenantId              String
  createdAt             DateTime  @default(now())
  closedAt              DateTime?
  assignedAgentUsername String?
  messages              Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String

  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  sender        String // 'client' or 'agent'
  agentUsername String?
  content       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
